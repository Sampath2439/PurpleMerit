version: '3.8'

services:
  # Main application
  app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/marketing_system
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=dev-secret-key-change-in-production
    depends_on:
      - db
      - redis
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    networks:
      - marketing_network

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=marketing_system
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - marketing_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - marketing_network

  # Neo4j graph database
  neo4j:
    image: neo4j:5.12.0
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - marketing_network

  # MCP Server (separate service)
  mcp_server:
    build: .
    command: >
      python -c "
      import asyncio
      from src.mcp.mcp_server import create_mcp_server
      server = create_mcp_server()
      asyncio.run(server.start())
      "
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=development
    volumes:
      - ./src:/app/src
    networks:
      - marketing_network

  # Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - marketing_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - marketing_network

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  prometheus_data:
  grafana_data:

networks:
  marketing_network:
    driver: bridge
